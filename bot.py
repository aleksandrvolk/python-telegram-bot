import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from docker_client import DockerClient
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramDockerBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.allowed_users = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id]
        self.docker_client = DockerClient()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list_containers")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üè∑Ô∏è –û–±—Ä–∞–∑—ã", callback_data="list_images")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üê≥ *Docker Manager Bot*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if self.allowed_users and user_id not in self.allowed_users:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        if query.data == "list_containers":
            await self.show_containers(query)
        elif query.data == "stats":
            await self.show_stats(query)
        elif query.data == "list_images":
            await self.show_images(query)
        elif query.data == "refresh":
            await self.refresh_menu(query)
        elif query.data.startswith("container_"):
            await self.handle_container_action(query)

    async def show_containers(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            containers = await self.docker_client.get_containers()
            
            if not containers:
                await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            message = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:*\n\n"
            keyboard = []
            
            for container in containers:
                status_emoji = "üü¢" if container['status'] == 'running' else "üî¥"
                message += f"{status_emoji} `{container['name']}`\n"
                message += f"   –°—Ç–∞—Ç—É—Å: {container['status']}\n"
                message += f"   –û–±—Ä–∞–∑: {container['image']}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"{'‚èπÔ∏è' if container['status'] == 'running' else '‚ñ∂Ô∏è'} {container['name'][:20]}",
                        callback_data=f"container_{container['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = await self.docker_client.get_stats()
            
            message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:*\n\n"
            message += f"üñ•Ô∏è CPU: {stats['cpu_percent']:.1f}%\n"
            message += f"üíæ –ü–∞–º—è—Ç—å: {stats['memory_percent']:.1f}%\n"
            message += f"üíø –î–∏—Å–∫: {stats['disk_percent']:.1f}%\n"
            message += f"üåê –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {stats['containers']}\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def show_images(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤"""
        try:
            images = await self.docker_client.get_images()
            
            if not images:
                await query.edit_message_text("üè∑Ô∏è –û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            message = "üè∑Ô∏è *Docker –æ–±—Ä–∞–∑—ã:*\n\n"
            
            for image in images:
                message += f"`{image['name']}`\n"
                message += f"   –†–∞–∑–º–µ—Ä: {image['size']}\n"
                message += f"   –°–æ–∑–¥–∞–Ω: {image['created']}\n\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤")

    async def handle_container_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
        container_id = query.data.split("_")[1]
        
        try:
            container_info = await self.docker_client.get_container_info(container_id)
            
            message = f"üê≥ *{container_info['name']}*\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {container_info['status']}\n"
            message += f"–û–±—Ä–∞–∑: {container_info['image']}\n"
            message += f"–°–æ–∑–¥–∞–Ω: {container_info['created']}\n"
            
            keyboard = []
            
            if container_info['status'] == 'running':
                keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_{container_id}")])
                keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{container_id}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"start_{container_id}")])
            
            keyboard.append([InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data=f"logs_{container_id}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_containers")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")

    async def refresh_menu(self, query):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list_containers")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üè∑Ô∏è –û–±—Ä–∞–∑—ã", callback_data="list_images")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üê≥ *Docker Manager Bot*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()
        
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    bot = TelegramDockerBot()
    bot.run()
