import os
import asyncio
import io
import json
from pathlib import Path
import docker
import paramiko
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

load_dotenv(dotenv_path=Path(__file__).with_name('.env'))

class DockerBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ SSH –¥–∞–Ω–Ω—ã—Ö
        self.user_states = {}
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_servers = {}
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ ENV (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–µ–∑ –ø—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é)
        self.env_servers = self._load_env_servers()
        print(f"ENV servers loaded: {len(self.env_servers)}")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # self.allowed_users = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id]
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å socket
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å socket
            if not os.path.exists('/var/run/docker.sock'):
                raise Exception("Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω: /var/run/docker.sock")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ socket
            self.docker_client = docker.DockerClient(base_url='unix:///var/run/docker.sock')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Docker
            self.docker_client.ping()
            print("Docker –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker socket —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            raise
        
    async def get_containers(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            containers = self.docker_client.containers.list(all=True)
            result = []
            for container in containers:
                result.append({
                    'name': container.name,
                    'status': container.status,
                    'image': container.image.tags[0] if container.image.tags else container.image.short_id
                })
            return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return []
    
    async def get_container_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            containers = self.docker_client.containers.list()
            if not containers:
                return "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
            
            stats_text = ""
            for container in containers:
                stats = container.stats(stream=False)
                cpu_percent = self._calculate_cpu_percent(stats)
                memory_percent = self._calculate_memory_percent(stats)
                
                stats_text += f"üü¢ {container.name}\n"
                stats_text += f"   CPU: {cpu_percent:.1f}%\n"
                stats_text += f"   –ü–∞–º—è—Ç—å: {memory_percent:.1f}%\n\n"
            
            return stats_text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    def _calculate_cpu_percent(self, stats):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU"""
        try:
            cpu_delta = stats['cpu_stats']['cpu_usage']['total_usage'] - stats['precpu_stats']['cpu_usage']['total_usage']
            system_delta = stats['cpu_stats']['system_cpu_usage'] - stats['precpu_stats']['system_cpu_usage']
            cpu_percent = (cpu_delta / system_delta) * len(stats['cpu_stats']['cpu_usage']['percpu_usage']) * 100.0
            return cpu_percent
        except:
            return 0.0
    
    def _calculate_memory_percent(self, stats):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            memory_usage = stats['memory_stats']['usage']
            memory_limit = stats['memory_stats']['limit']
            return (memory_usage / memory_limit) * 100.0
        except:
            return 0.0
    
    async def start_container(self, container_name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.start()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False
    
    async def stop_container(self, container_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.stop()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False
    
    async def restart_container(self, container_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            container = self.docker_client.containers.get(container_name)
            container.restart()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False
    
    async def get_container_logs(self, container_name, lines=20):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container = self.docker_client.containers.get(container_name)
            logs = container.logs(tail=lines).decode('utf-8')
            return logs
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        # user_id = update.effective_user.id
        # if hasattr(self, 'allowed_users') and self.allowed_users and user_id not in self.allowed_users:
        #     await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        #     return
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üîê –°–µ—Ä–≤–µ—Ä—ã (remote)", callback_data="ssh_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üê≥ *Docker Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "list":
            await self.show_containers(query)
        elif query.data == "stats":
            await self.show_stats(query)
        elif query.data == "back":
            await self.start_menu(query)
        elif query.data == "ssh_menu":
            await self.show_ssh_menu(query)
        elif query.data == "ssh_add":
            await self.start_add_ssh_server(query)
        elif query.data.startswith("ssh_connect_"):
            server_id = query.data.replace("ssh_connect_", "")
            await self.show_remote_containers(query, server_id)
        elif query.data.startswith("ssh_stats_"):
            server_id = query.data.replace("ssh_stats_", "")
            await self.show_remote_stats(query, server_id)
        elif query.data.startswith("ssh_delete_confirm_"):
            server_id = query.data.replace("ssh_delete_confirm_", "")
            await self.delete_server(query, server_id)
        elif query.data.startswith("ssh_delete_"):
            server_id = query.data.replace("ssh_delete_", "")
            await self.confirm_delete_server(query, server_id)
        elif query.data.startswith("container_"):
            await self.show_container_info(query)
        elif query.data.startswith("action_"):
            await self.handle_action(query)
    
    async def start_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", callback_data="list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üîê –°–µ—Ä–≤–µ—Ä—ã (SSH)", callback_data="ssh_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üê≥ *Docker Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
    
    async def show_containers(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        containers = await self.get_containers()
        
        if not containers:
            await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        message = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:*\n\n"
        keyboard = []
        
        for container in containers:
            status_emoji = "üü¢" if container['status'] == 'running' else "üî¥"
            
            message += f"{status_emoji} `{container['name']}`\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {container['status']}\n"
            message += f"   –û–±—Ä–∞–∑: {container['image']}\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{'‚èπÔ∏è' if container['status'] == 'running' else '‚ñ∂Ô∏è'} {container['name']}",
                    callback_data=f"container_{container['name']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_ssh_menu(self, query):
        """–ú–µ–Ω—é SSH —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_servers = self.user_servers.get(user_id, [])
        env_servers = self.env_servers

        message = "üîê *–°–µ—Ä–≤–µ—Ä—ã (SSH):*\n\n"
        keyboard = []

        if not env_servers and not user_servers:
            message += "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.\n\n"
        else:
            if env_servers:
                message += "–ò–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                for idx, srv in enumerate(env_servers):
                    label = f"{srv['username']}@{srv['host']}"
                    keyboard.append([InlineKeyboardButton(f"üìã {label}", callback_data=f"ssh_connect_env_{idx}")])
                    keyboard.append([InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {label}", callback_data=f"ssh_stats_env_{idx}")])
                message += "\n"
            if user_servers:
                message += "–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n"
                for idx, srv in enumerate(user_servers):
                    label = f"{srv['username']}@{srv['host']}"
                    keyboard.append([InlineKeyboardButton(f"üìã {label}", callback_data=f"ssh_connect_user_{idx}")])
                    keyboard.append([InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {label}", callback_data=f"ssh_stats_user_{idx}")])
                    keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: {label}", callback_data=f"ssh_delete_user_{idx}")])

        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="ssh_add")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup)

    async def confirm_delete_server(self, query, server_id: str):
        user_id = query.from_user.id
        scope, srv = self._resolve_server_by_id(server_id, user_id)
        if scope != 'user' or not srv:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
            return

        label = f"{srv['username']}@{srv['host']}"
        message = f"–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {label}?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"ssh_delete_confirm_{server_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ssh_menu")]
        ]
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    async def delete_server(self, query, server_id: str):
        user_id = query.from_user.id
        scope, srv = self._resolve_server_by_id(server_id, user_id)
        if scope != 'user' or not srv:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
            return
        servers = self.user_servers.get(user_id, [])
        idx = int(server_id.split('_', 1)[1])
        removed = servers.pop(idx)
        if not servers:
            self.user_servers.pop(user_id, None)

        label = f"{removed['username']}@{removed['host']}"
        await query.edit_message_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω: {label}")
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self.show_ssh_menu(query)

    async def start_add_ssh_server(self, query):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SSH —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞"""
        user_id = query.from_user.id
        self.user_states[user_id] = {
            'flow': 'add_server',
            'step': 'host',
            'temp': {}
        }
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ host (ip/–¥–æ–º–µ–Ω) —Å–µ—Ä–≤–µ—Ä–∞:")

    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ SSH"""
        user_id = update.effective_user.id
        state = self.user_states.get(user_id)
        if not state:
            return

        if state.get('flow') == 'add_server':
            if state.get('step') == 'host':
                state['temp']['host'] = update.message.text.strip()
                state['step'] = 'username'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, root):")
                return
            if state.get('step') == 'username':
                state['temp']['username'] = update.message.text.strip()
                state['step'] = 'password'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ —Ä–∞–∑–æ–≤–æ, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞):")
                return
            if state.get('step') == 'password':
                # –ë–µ—Ä—ë–º –ø–∞—Ä–æ–ª—å –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
                state['temp']['password'] = update.message.text.strip()
                try:
                    await update.message.delete()
                except Exception:
                    # –ú–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    pass
                host = state['temp']['host']
                username = state['temp']['username']
                password = state['temp']['password']

                await update.message.reply_text("–ü—Ä–æ–±—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä...")
                try:
                    server_entry = await self._install_key_and_save_server(user_id, host, username, password)
                except Exception as e:
                    self.user_states.pop(user_id, None)
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á: {e}")
                    return

                self.user_states.pop(user_id, None)
                label = f"{server_entry['username']}@{server_entry['host']}"
                await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –°–µ—Ä–≤–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {label}")
                # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é SSH
                keyboard = [
                    [InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="ssh_menu")]
                ]
                await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
                return

    async def _install_key_and_save_server(self, user_id: int, host: str, username: str, password: str):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        private_key_str, public_key_str = self._generate_ssh_keypair(comment=f"{username}@dockerbot")

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–æ–ª—å
        self._ssh_copy_id(host, username, password, public_key_str)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä
        server_entry = {
            'host': host,
            'username': username,
            'private_key': private_key_str,
            'public_key': public_key_str
        }
        self.user_servers.setdefault(user_id, []).append(server_entry)
        return server_entry

    def _generate_ssh_keypair(self, comment: str = "dockerbot"):
        key = paramiko.RSAKey.generate(2048)
        private_io = io.StringIO()
        key.write_private_key(private_io)
        private_key_str = private_io.getvalue()
        public_key_str = f"{key.get_name()} {key.get_base64()} {comment}"
        return private_key_str, public_key_str

    def _ssh_copy_id(self, host: str, username: str, password: str, public_key: str):
        """–ê–Ω–∞–ª–æ–≥ ssh-copy-id: –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ authorized_keys"""
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname=host, username=username, password=password, timeout=20)
        try:
            commands = [
                "mkdir -p ~/.ssh",
                "chmod 700 ~/.ssh",
                "touch ~/.ssh/authorized_keys",
                "chmod 600 ~/.ssh/authorized_keys",
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                f"grep -qxF '{public_key}' ~/.ssh/authorized_keys || echo '{public_key}' >> ~/.ssh/authorized_keys"
            ]
            for cmd in commands:
                self._ssh_exec_client(ssh, cmd)
        finally:
            ssh.close()

    def _build_pkey(self, private_key_str: str):
        return paramiko.RSAKey.from_private_key(io.StringIO(private_key_str))

    def _ssh_exec(self, host: str, username: str, private_key_str: str, command: str, timeout: int = 20):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        pkey = self._build_pkey(private_key_str)
        ssh.connect(hostname=host, username=username, pkey=pkey, timeout=timeout)
        try:
            return self._ssh_exec_client(ssh, command, timeout)
        finally:
            ssh.close()

    def _ssh_exec_client(self, ssh: paramiko.SSHClient, command: str, timeout: int = 20):
        stdin, stdout, stderr = ssh.exec_command(command, timeout=timeout)
        out = stdout.read().decode('utf-8', errors='ignore').strip()
        err = stderr.read().decode('utf-8', errors='ignore').strip()
        if err and not out:
            return err
        return out

    async def show_remote_containers(self, query, server_id: str):
        user_id = query.from_user.id
        scope, srv = self._resolve_server_by_id(server_id, user_id)
        if not srv:
            await query.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        output = self._ssh_exec(
            srv['host'], srv['username'], srv['private_key'],
            "docker ps -a --format '{{.Names}}|{{.Status}}|{{.Image}}'"
        )

        lines = [l for l in output.split('\n') if l.strip()]
        if not lines:
            await query.edit_message_text("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–Ω–æ)")
            return

        message = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—É–¥–∞–ª–µ–Ω–Ω–æ):*\n\n"
        for line in lines:
            try:
                name, status, image = line.split('|', 2)
            except ValueError:
                continue
            status_emoji = "üü¢" if status.lower().startswith('up') else "üî¥"
            message += f"{status_emoji} `{name}`\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"   –û–±—Ä–∞–∑: {image}\n\n"

        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"ssh_stats_{server_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ssh_menu")]
        ]
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    async def show_remote_stats(self, query, server_id: str):
        user_id = query.from_user.id
        scope, srv = self._resolve_server_by_id(server_id, user_id)
        if not srv:
            await query.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        output = self._ssh_exec(
            srv['host'], srv['username'], srv['private_key'],
            "docker stats --no-stream --format '{{.Name}}|{{.CPUPerc}}|{{.MemPerc}}'"
        )
        lines = [l for l in output.split('\n') if l.strip()]
        if not lines:
            await query.edit_message_text("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—É–¥–∞–ª–µ–Ω–Ω–æ)")
            return

        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—É–¥–∞–ª–µ–Ω–Ω–æ):*\n\n"
        for line in lines:
            try:
                name, cpu, mem = line.split('|', 2)
            except ValueError:
                continue
            message += f"üü¢ {name}\n"
            message += f"   CPU: {cpu}\n"
            message += f"   –ü–∞–º—è—Ç—å: {mem}\n\n"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ssh_menu")]]
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    def _load_env_servers(self):
        # –¢–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: SSH_SERVERS_PWD_JSON
        raw_pwd = os.getenv('SSH_SERVERS_PWD_JSON', '')
        if raw_pwd is None:
            raw_pwd = ''
        raw_pwd = raw_pwd.strip()
        print(f"SSH_SERVERS_PWD_JSON present={bool(raw_pwd)} len={len(raw_pwd) if raw_pwd else 0}")
        pwd_based = []
        if raw_pwd:
            try:
                data_pwd = json.loads(raw_pwd)
                print(f"SSH_SERVERS_PWD_JSON parsed, type={type(data_pwd).__name__}")
                if isinstance(data_pwd, list):
                    print(f"SSH_SERVERS_PWD_JSON list size={len(data_pwd)}")
                    for idx, item in enumerate(data_pwd):
                        if not isinstance(item, dict):
                            print(f"SSH_SERVERS_PWD_JSON[{idx}] skipped: not a dict")
                            continue
                        host = item.get('host')
                        username = item.get('username')
                        password = item.get('password')
                        if not host or not username or not password:
                            print(f"SSH_SERVERS_PWD_JSON[{idx}] missing required fields")
                            continue
                        try:
                            entry = self._install_key_for_env(host, username, password)
                            pwd_based.append(entry)
                        except Exception as e:
                            print(f"SSH_SERVERS_PWD_JSON[{idx}] install failed: {e}")
                            continue
            except Exception as e:
                print(f"SSH_SERVERS_PWD_JSON json error: {e}")

        return pwd_based

    def _install_key_for_env(self, host: str, username: str, password: str):
        private_key_str, public_key_str = self._generate_ssh_keypair(comment=f"{username}@dockerbot-env")
        self._ssh_copy_id(host, username, password, public_key_str)
        return {
            'host': host,
            'username': username,
            'private_key': private_key_str,
            'public_key': public_key_str
        }

    def _resolve_server_by_id(self, server_id: str, user_id: int):
        # server_id –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–∞: "env_0" –∏–ª–∏ "user_1" –∏–ª–∏ —Å—Ç–∞—Ä—ã–π int (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if server_id.isdigit():
            servers = self.user_servers.get(user_id, [])
            try:
                idx = int(server_id)
                return 'user', servers[idx]
            except Exception:
                return None, None
        if '_' in server_id:
            scope, idx_str = server_id.split('_', 1)
            try:
                idx = int(idx_str)
            except Exception:
                return None, None
            if scope == 'env':
                try:
                    return 'env', self.env_servers[idx]
                except Exception:
                    return None, None
            if scope == 'user':
                servers = self.user_servers.get(user_id, [])
                try:
                    return 'user', servers[idx]
                except Exception:
                    return None, None
        return None, None
    
    async def show_container_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        container_name = query.data.split("_")[1]
        
        try:
            container = self.docker_client.containers.get(container_name)
            status = container.status
            
            message = f"üê≥ *{container_name}*\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"–û–±—Ä–∞–∑: {container.image.tags[0] if container.image.tags else container.image.short_id}\n\n"
            
            keyboard = []
            
            if status == 'running':
                keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"action_stop_{container_name}")])
                keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_restart_{container_name}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"action_start_{container_name}")])
            
            keyboard.append([InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data=f"action_logs_{container_name}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}")
    
    async def handle_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
        data = query.data.split("_")
        action = data[1]
        container_name = "_".join(data[2:])
        
        if action == "start":
            success = await self.start_container(container_name)
            if success:
                await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –∑–∞–ø—É—â–µ–Ω")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}")
        elif action == "stop":
            success = await self.stop_container(container_name)
            if success:
                await query.edit_message_text(f"‚èπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}")
        elif action == "restart":
            success = await self.restart_container(container_name)
            if success:
                await query.edit_message_text(f"üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}")
        elif action == "logs":
            logs = await self.get_container_logs(container_name, 20)
            if len(logs) > 3000:
                logs = logs[-3000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"
            
            message = f"üìù *–õ–æ–≥–∏ {container_name}:*\n\n```\n{logs}\n```"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"container_{container_name}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats_text = await self.get_container_stats()
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        containers = await self.get_containers()
        total_containers = len(containers)
        running_containers = len([c for c in containers if c['status'] == 'running'])
        
        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:*\n\n"
        message += f"üåê –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {running_containers}/{total_containers}\n\n"
        message += stats_text
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()
        
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    bot = DockerBot()
    bot.run()
